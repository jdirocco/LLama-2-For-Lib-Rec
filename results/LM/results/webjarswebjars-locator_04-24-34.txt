<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: webjars/webjars-locator
    Project Description: webjarslocator\n===============\n\nThis poorly named library is really just the RequireJS support that wraps the project.\n\n\n\n\n'
    Existing Dependencies:
    org.webjars.npm:validate.js
- org.webjars:requirejs
- org.webjars:webjars-locator-core
- org.slf4j:slf4j-simple
- org.webjars.npm:angular-pouchdb
- com.fasterxml.jackson.core:jackson-databind
- org.webjars.npm:babel-runtime
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 7 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
    
    
    <style type="text/css">
        /*.navbar{background-color: #2780e3;}*/

       .navbar-default {
            background-color: #2780e3;
            border-color: #e7e7e7;
        }

       .navbar-default.navbar-nav > li > a {color: #FFF;}
       .navbar-default.navbar-nav > li > a:hover {color: #FFF;}
       .navbar-default.navbar-nav >.active > a,.navbar-nav >.active > a {color: #555;}
       .navbar-default.navbar-nav >.active > a:hover,.active >.open > a:hover,.active > a:focus {color: #FFF;}
       .navbar-default.navbar-brand {color: #fff;}
       .navbar-default.navbar-brand:hover,.navbar-default.navbar-brand:focus {color: #fff;}
       .navbar-default.navbar-nav >.dropdown > a.badge {background-color: #ff3546;color: #FFF;}
       .navbar-default.navbar-toggle {border-color: #FFF;color: #FFF;}
       .navbar-default.navbar-toggle:hover,.navbar-default.navbar-toggle:focus {background-color: #FFF;}
       .navbar-default.container.navbar-brand {color: white;background-color: #2780e3;border:0;padding-left: 0;padding-right: 0;padding-top:0;padding-bottom: 0;}
       .navbar-toggle.collapsed>.icon-bar{background-color: white;}
       .navbar-toggle{margin: 0;}
       .navbar-default.navbar-nav>li>a.active{background-color:#2780e3;color:#fff;}
    </style>
    <nav class="navbar navbar-default navbar-fixed-top" role="navigation">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">
                    <img alt="Brand" src="<?=base_url("img/brand.png")?>" style="height: auto;width: 110px;">                
                </a>
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right main-menu">
                    <li><a href="#">Home</a></li>
                    <li><a href="#">Features</a></li>
                    <li><a href="#">Testimonials</a></li>
                    <li><a href="#">Pricing</a></li>
                   
    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 7 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>nction(done) {
		// Create new Product object
		var productObj = new Product(product);

		// Save the Product
		productObj.save(function() {
			// Request Products
			request(app).get('/products')
				.end(function(req, res) {
					// Set assertion
					res.body.should.be.an.Array.with.lengthOf(1);

					// Call the assertion callback
					done();
				});

		});
	});


	it('should be able to get a single Product if not signed in', function(done) {
		// Create new Product model instance
		var productObj = new Product(product);

		// Save the Product
		productObj.save(function() {
			request(app).get('/products/' + productObj._id)
				.end(function(req, res) {
					// Set assertion
					res.body.should.be.an.Object.with.property('name', product.name);

					// Call the assertion callback
					done();
				});
		});
	});

	it('should be able to delete Product instance if signed in', function(done) {
		agent.post('/auth/signin')
			.send(credentials)
			.expect(200)
			.end(function(signinErr, signinRes) {
				// Handle signin error
				if (signinErr) done(signinErr);

				// Get the userId
				var userId = user.id;

				// Save a new Product
				agent.post('/products')
					.send(product)
					.expect(200)
					.end(function(productSaveErr, productSaveRes) {
						// Handle Product save error
						if (productSaveErr) done(productSaveErr);

						// Delete existing Product
						agent.delete('/products/' + productSaveRes.body._id)
							.send(product)
							.expect(200)
							.end(function(productDeleteErr, productDeleteRes) {
								// Handle Product error error
								if (productDeleteErr) done(productDeleteErr);

								// Set assertions
								(productDeleteRes.body._id).should.equal(productSaveRes.body._id);

								// Call the assertion callback
								done();
							});
					});
			});
	});

	it('should not be able to delete Product instance if not signed in', function(done) {
		// Set Product user 
		product.user = user;

		// Create new Product model

Precision: 0
Recall: 0
F1 Score: 0
