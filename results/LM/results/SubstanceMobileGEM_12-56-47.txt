<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: SubstanceMobile/GEM
    Project Description: TODO: Switch to gitflow structure\n\n GEM Player Beta\nApp Manager: Adrian Vovk @AnimbusDev\n\n\n\n\n\n\nGEM Player is a part of the Substance Mobile suite of apps & promises to be nimble, functional, and customizable.\nIt is largely inspired by the music player demoed at Google I/O 2014.\n\n Contributing\nIf you want to contribute, go ahead! Just keep in mind that:\n Translations are accepted, but soon we will be switching to a different service so this will not apply.\n Keep it organised: we would be very grateful of you kept up with the proper syntax naming variables properly, keeping up with the dev's bracket style, etc.\n Your PR might be rejected, but the change may be applied in a different way. If so, the manager will have to point you to the commits of the change.\n Please test your modifications if you cannot test it for some reason, please just say so in the PR. Also, please mark the last commit you tested your PR with. We will take care of the rest.\n If your PR isn't compatible with other PRs, don't worry. The dev will fix it.\n These may be updated over time, so please keep watch.\n\n\n Developing\nBuilding GEM player is easy, and it is managed by the .\nTo build, see the documentation for the SDK Gradle Plugin \n\n Screenshots:\n\n\n\n\n Links:\n, \n"
    Existing Dependencies:
    com.android.support:palette-v7
- com.android.support:recyclerview-v7
- com.android.support:support-vector-drawable
- com.android.support:appcompat-v7
- com.jakewharton:butterknife
- com.android.support:design
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 7 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
    
    var map = L.map('map', {
        zoomControl:false
        
    }).setView([-23.3861198,-51.7791711], 14);

    L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/light-v10/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibXN0cmlzdGljY2hvIiwiYSI6ImNrb2JzOXh0cTBsY2syb252eDV6bDk4N2QifQ.ZZ7QW9J72Q8ZJYZQYZQ28w', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
    id:'mapbox/streets-v11',
    tileSize: 512,
    zoomOffset: -1,
    accessToken: 'your.mapbox.access.token'}).addTo(map);


var marker = new L.LatLng(-23.3861198,-51.7791711);
var circle = new L.circle(marker, {radius:1000}).addTo(map);
//circle.bindPopup("<b>Oi!</b><br />I am a circle.");

map.attributionControl.setPrefix(false);
    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 7 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>t_to_s3(s3_client, data, file_location.bucket_name, file_location.key_name)

        # delete temp files
        self.delete_temp_file(data_location)
        self.delete_temp_file(file_location)

    # ===========================================================================================
    #
    # ===========================================================================================
    def download_data(self, data_location: Location, file_location: Location) -> None:
        # get data location object as s3 bucket
        s3_client = get_s3_client()
        # download data to local file_system
        get_from_s3(s3_client, data_location.bucket_name, data_location.key_name, file_location)

    # ===========================================================================================
    #
    # ===========================================================================================
    def delete_temp_file(self, file_location: Location) -> None:
        # get data_location object as s3 bucket
        s3_client = get_s3_client()

        # download data to local file_system
        delete_from_s3(s3_client, file_location.bucket_name, file_location.key_name, file_location)

    # ===========================================================================================
    #
    # ===========================================================================================
    def copy_data(self, data_location: Location, file_location: Location) -> None:
        # get data_location object as s3 bucket
        s3_client = get_s3_client()

        # copy data to temp s3
        put_to_s3(s3_client, data_location.bucket_name, data_location.key_name, file_location.bucket_name, file_location.key_name)
 """
This module contains class and methods to perform data operations with S3 bucket. It has
methods to put data to S3 bucket, get data from S3 bucket and to download data from S3 bucket.
The data can be stored as file, json, or csv.
"""

from typing import Dict
import boto3
from botocore.exceptions import ClientError, EndpointConnectionError
from botocore.client import BaseClient
import json
import requests
import pandas as pd
import urllib3
import os
import shutil

from.aws_utilities import (
    get_s3_client,
    get_from_s3,
    put_to_s3,
    delete_from_s3,
    copy_from_s3,
)
from..data.file_utilities import get_temp_file_location as create_local_temp_file_path
from..data.file_utilities import (
    get_temp_directory_location,
    get_file_type,
    read_as_bytes,
    write_to_file,
    read_file,
    get_file_type_from_location,
)
from..data.location_utilities import Location


def get_s3_client() -> BaseClient:
    s3 = boto3.client(
        "s3",
        aws_access_key_id=os.getenv("s3_access_key_id"),
        aws_secret_access_key=os.getenv("s3_secret_access_key"),

Precision: 0
Recall: 0
F1 Score: 0
