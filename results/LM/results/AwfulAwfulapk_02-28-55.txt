<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: Awful/Awful.apk
    Project Description: Awful\n\nAwful is an unofficial viewer for the SomethingAwful forumsforums on Android platforms. Come check out the Awful forum threadforumthread!\n\n\n\n Terms and Conditions for usage of this app\n\nIf you are a Google Play reviewbot or actual flesh automaton, you can find the forum rules or "terms of user/user policy" at this address on the interwebsforumrules. I\'m not sure why you would look for them here, but you do you.\n\n Contributing\n\nWant to help? Come join us in the development and beta testing threaddevthread, and join the beta testing programjoinbeta.\n\nOr take a look at our issuesissues and set up your own fork to quash some bugs!\n\n Build using Android Studio recommended\n\n1. Download and install Android Studioandroidstudio.\n After install, make sure to accept licenses for SDKs.acceptlicensing From the welcome screen, choose the threedot menu in the upper righthand corner check click click .\n2. Fork Awful.apk on Githubgithubforkhowto.\n3. Download your fork\'s Git repository and open the project in Android Studio.\n Quick way: from the welcome screen, choose and enter the Github URL for your new fork.\n4. Create your own .\n 1. Create your own Firebase projectfirebaseconsole for Awful.\n 2. Add an Android app to your Firebase project.\n 3. For Android package name, enter .\n 4. Download the config file.\n 5. Place in the inner folder.\n5. Optional If you\'d like to be able to upload images to Imgur:\n 1. Register a new application for the Imgur APIimgurapidocs.\n 2. Create the file secretsexample in .\n 3. Place the client ID in , like so:\n\n6. should run without any issues!\n\nFurther questions or problems? Please let us know in the dev threaddevthread.\n\nforums:
    Existing Dependencies:
    com.bignerdranch.android:expandablerecyclerview
- com.github.orangegangsters:swipy
- org.hamcrest:hamcrest-library
- com.jakewharton:butterknife-compiler
- com.jakewharton.threetenabp:threetenabp
- org.apache.commons:commons-lang3
- com.ToxicBakery.viewpager.transforms:view-pager-transforms
- com.android.support:appcompat-v7
- com.google.code.gson:gson
- com.android.support:design
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 10 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
     <nav class="navbar navbar-default" role="navigation">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
           <a class="navbar-brand" href="{{ url('/') }}"><span style="color:#096dd6">M</span> <span style="color:#09879B">E</span> <span style="color:#EA9000">D</span> <span style="color:#EA0000">S</span></a>
        </div>
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
          <ul class="nav navbar-nav navbar-right">
              @if(!empty($menu))
                @foreach($menu as $menuItem)
              <li ><a href="{{$menuItem->URL}}"><span>{{$menuItem->Title}}</span><span class="sr-only">(current)</span></a></li>
              @endforeach
              @endif
          @if (!Auth::check())
             <li  class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span><i class="icon-user"></i> Sign in <span class="caret"></span></a>
              <ul class="dropdown-menu">
              <li class="{{ Request::is('admin/register')? 'active' : '' }}"><a href="{{url('admin/register')}}"><i class="fa fa-user"></i> Register</a></li>
          <li class="{{ Request::is('admin/login')? 'active' : '' }}"><a href="{{url('admin/login')}}"><i class="fa fa-user"></i> Login</a></li>
              </ul>
            </li>
            @endif
            @if (Auth::check())
            <li class="dropdown">
            <a href="#" class="dropdown" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span>{!! Auth::user()->first_name!!}<span class="caret"></span></span></a>
            <ul class="dropdown-menu">

              <li class="{{ Request::is('admin/profile')? 'active' : '' }}"><a href="{{url('admin/profile')}}"><i class="fa fa-user"></i> Profile</a></li>
              <li class="{{ Request::is('admin/dashboard/logout')? 'active' : '' }}"><a class="dropdown-item" href="{{ route('admin.logout') }}"
                    onclick="event.preventDefault();
                    document.getElementById('logout-form').submit();"><i class="fa fa-sign-out pull-right" ></i>Logout</a>
        <form id="logout-form" action="{{ route('admin.logout') }}" method="POST" style="display: none;">
    {{ csrf_field() }}

    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 10 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s> // Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kinesisvideo

import (
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

var _ aws.Config
var _ = awsutil.Prettify

// A structure that describes the metadata tags associated with the stream.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kinesisvideo-2017-09-30/ResourceTags
type ResourceTags struct {
	_ struct{} `type:"structure"`

	// A list of tags associated with the stream.
	//
	// Tags is a required field
	Tags map[string]string `min:"1" type:"map" required:"true"`
}

// String returns the string representation
func (s ResourceTags) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ResourceTags) MarshalFields(e protocol.FieldEncoder) error {
	if s.Tags!= nil {
		v := s.Tags

		metadata := protocol.Metadata{}
		ms0 := e.Map(protocol.BodyTarget, "Tags", metadata)
		ms0.Start()
		for k1, v1 := range v {
			ms0.MapSetValue(k1, protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ms0.End()

	}
	return nil
}

// An object describing a Kinesis video stream.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/kinesisvideo-2017-09-30/StreamInfo
type StreamInfo struct {
	_ struct{} `type:"structure"`

	// A time stamp that indicates when the stream was created.
	//
	// CreateTime is a required field
	CreateTime *time.Time `type:"timestamp" timestampFormat:"unix" required:"true"`

	// The name of the device that is associated with the stream.
	//
	// DeviceName is a required field
	DeviceName *string `min:"1" type:"string" required:"true"`

	// The name of the stream.
	//
	// StreamName is a required field
	StreamName *string `min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s StreamInfo) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s StreamInfo) MarshalFields(e protocol.FieldEncoder) error {
	if s.CreateTime!= nil {
		v := *s.CreateTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "CreateTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.DeviceName!= nil {
		v

Precision: 0
Recall: 0
F1 Score: 0
