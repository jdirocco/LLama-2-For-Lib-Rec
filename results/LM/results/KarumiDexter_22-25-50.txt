<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: Karumi/Dexter
    Project Description: \n======\n\nThis project is no longer under active development. If you are looking for an Android library to be able to request Android permissions in runtime take a look \n\nDexter is an Android library that simplifies the process of requesting permissions at runtime.\n\nAndroid Marshmallow includes a new functionality to let users grant or deny permissions when running an app instead of granting them all when installing it. This approach gives the user more control over applications but requires developers to add lots of code to support it.\n\nDexter frees your permission code from your activities and lets you write that logic anywhere you want.\n\n\nScreenshots\n\n\n. This is an example of how a multiple permission request should be implemented:\n\n\n\nCaveats\n\n For permissions that did not exist before API Level 16, you should check the OS version and use ContextCompat.checkSelfPermission. See .\n Don\'t call Dexter from an Activity with the flag enabled. When a permission is requested, Dexter creates its own Activity internally and pushes it into the stack causing the original Activity to be dismissed.\n Permissions and are considered special by Android. Dexter doesn\'t handle those and you\'ll need to request them in the old fashioned way.\n\n Contributors\n\nThank you all for your work!\n\n| | | | | |\n| :: | :: | :: | :: | :: |\n| | | | | |\n| | | | | \n| | | | | \n| | | | \n\nDo you want to contribute?\n\n\nFeel free to add any useful feature to the library, we will be glad to improve it with your help.\n\nKeep in mind that your PRs must be validated by TravisCI. Please, run a local build with ./gradlew checkstyle build test before submiting your code.\n\n\nLibraries used in this project\n\n\n Butterknife3\n JUnit4\n Mockito5\n\nLicense\n\n\n Copyright 2015 Karumi\n\n Licensed under the Apache License, Version 2.0 the "License";\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an "AS IS" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n1: ./art/sample.gif\n2:
    Existing Dependencies:
    com.android.support:support-annotations
- org.hamcrest:hamcrest-library
- org.mockito:mockito-core
- com.jakewharton:butterknife-compiler
- com.android.support:appcompat-v7
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 6 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
    
    
    
    <!-- ========================= SECTION CONTENT ========================= -->
    <section  class="section-content padding-y-sm"  >
      <div class="container">
        
        <div class="row">
          <main class="col-md-9">
            

            <!-- ============================ COMPONENT 2 ================================= -->
            <div class="card mb-2">
              <div class="itemside">
                <div class="aside">
                  <div class="itemcard-header">
                    
                  </div>
                  <div  class="itemcard-img" style="text-align:center; margin-top: 5px;"> 
                    
                   <?php
                        if((!empty($profile_data->user_profile_image)) && $this->db->field_exists('user_profile_image', 'user_profile')) { 
                       ?>
                   <img src="<?php echo $profile_data->user_profile_image;?>" style='max-width:100%; max-height:100%; height: 100px;' class="img-responsive"  />
                  </div>
                  <div class="itemcard-body"> 
                   <?php 
                   }else{
                  ?>   
                  <h6 class="title"> <img src="https://image.flaticon.com/icons/svg/121/121311.svg" style="width: 70px;" class="img-responsive" /> </h6>  
                  <?php } 
                    if($this->db->field_exists('user_address', 'user_profile'))
                    {
                 ?>
                    <p class="text-muted"><small><i> <?php 
                    if(!empty($profile_data->user_address)){
                        echo $profile_data->city.",".$profile_data->state.",".$profile_data->country;
                        $city = $profile_data->city;
                        $state = $profile_data->state;
                        $country = $profile_data->country;
                        $lat= "latitude"; 
                        $lat = get_cookie($lat);
                        $long= "longitude"; 
                        $long = get_cookie($long);
                    }else{
                        if(!empty($city)){
                             $city=$city;
                             $state=$state;
                             $country=$country;
                            $lat= "latitude"; 
                            $lat = get_cookie($lat);
                            $long= "longitude"; 
                            $long = get_cookie($long);
                    
                        }
                    }   

                    ?></i></small></p>
                  <?php
              }
             ?></div> <!-- item-info-right -->
                    <div class="row">
                        <div class="col">
                          <p class="small">
                            <i class="fa fa-thumbs-up"></i> 200 Likes
                          </p>
                        </div>
                        <div class="col">
                          <p class="small">
                            250 Share
                          </p>
                        </div>
                      </div
    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 6 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>nstance().getAll();

        Assertions.assertEquals(2, actual);
    }
} package com.moh.ihrisupdatetool.di;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.LargeTest;

import com.google.firebase.messaging.FirebaseMessaging;
import com.moh.ihrisupdatetool.R;
import com.moh.ihrisupdatetool.db.entities.FacilityEntity;
import com.moh.ihrisupdatetool.db.entities.ImmunizationEntity;
import com.moh.ihrisupdatetool.db.entities.LevelEntity;
import com.moh.ihrisupdatetool.db.entities.VaccinationEntity;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;

import dagger.hilt.android.testing.HiltAndroidRule;
import dagger.hilt.android.testing.HiltAndroidTest;
import dagger.hilt.android.testing.HiltTestApplication;
import io.reactivex.rxjava3.disposables.Disposable;
import io.reactivex.rxjava3.schedulers.Schedulers;
import okhttp3.MediaType;
import okhttp3.ResponseBody;
import retrofit2.HttpException;
import retrofit2.Response;

@HiltAndroidTest
@RunWith(AndroidJUnit4.class)
@LargeTest
public class RepositoryTest {

    @Before
    public void initDb() {
        HiltTestApplication.setInstrumentationTestRunner(true);
    }


    @Test
    public void getVaccination_success(){
        long actual = FirebaseDatabaseManager.getInstance().getLevelDao().count();

        Assertions.assertEquals(3, actual);
    }

    @Test
    public void getVaccine_successTest() {

       long actual = FirebaseDatabaseManager.getInstance().getvaccineDao().count();

        Assertions.assertEquals(11, actual);
    }

    @Test
    public void getFacilitiesTest() {
    int actual =  FirebaseDatabaseManager.getInstance().getvaccineDao().count();
        Assertions.assertEquals(11, actual);
    }

    @Test
    public void getFacilitiesListTest() {

        List<FacilityEntity> facilityEntity =  FirebaseDatabaseManager.getInstance().getFacilitiesDao().getFacilities();
        Assertions.assertEquals(11, facilityEntity.size());
    }

    @Test
    public void getFacilitiesListTestNull() {

        List<FacilityEntity> facilityEntity =  FirebaseDatabaseManager.getInstance().getFacilitiesDao().getFacilitiesNull();
        Assertions.assertEquals(2, facilityEntity.size());
    }


    @Test
    public void insertVaccine_success() {
        VaccinationEntity vaccine = new VaccinationEntity();
        vaccine.setId(3);
        vaccine.setName("Vaccine");

        FirebaseDatabaseManager

Precision: 0
Recall: 0
F1 Score: 0
