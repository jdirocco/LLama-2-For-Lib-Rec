<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: Netflix/ocelli
    Project Description: What is Ocelli?\n\nOcelli is a client side reactive load balancer based on RxJava.\n\n\n\n\n Why Ocelli?\n\nIn biology Ocelli is a simple eye as opposed to a complex eye. Ocelli the library is a simple load balancer implementation as opposed to very complex load balancers that do too many via magic or are too tightly coupled with the client transport. Don't know how to pronounce Ocelli? Goto How is Ocelli Reactive?\n\nOcelli exposes a very simple API to choose a client. A new client is emitted for each subscription to the return Observable based on changes within the load balancer and optimization based on the load balancing algorithm. Ocelli reacts to changes in the network topology either via server membership events or server failure detection.\n\n How is Ocelli Functional?\n\nOcelli is policy driven by delegating key strategies and metric sources via simple functions. This approach simplifies the load balancer implementation so that it is decoupled from the speicific client SPI. These functions are essentially the glue between the load balancer algorithm and the client SPI.\n\n Key design principles\n\n Metrics\nOcelli doesn't attempt to track metrics for client libraries. That role is delegated to the client libraries since most libraries already perform that task. Ocelli simply provides hooks via functions for libraries to provide the metric value.\n\n Retry\nRetry friendly, not retry magic! Code that performs operations in multiple layers is easily susceptible to retry storms where each layer is unaware of retries in the next. Ocelli makes retries possible by tracking state so that retries are efficient but does not force any particular retry policy. Instead Ocelli let's the caller specify retry policieis via RxJava's built in retry operations such as retry, retryWhen and onErrorResumeNext. \n\n Composability \nOcelli is composable in that the load balancer can be combined with other functionality such as caching, retry and failover. Ocelli delegates as much functionality to the RxJava operators to give users of the library full control. In most cases specific policies may be specified in just one line of code.\n\n Light configuration\nTODO\n\n Key features\n\n Pluggable load balancing strategy\n\n Pluggable metrics gathering\n\n Partitioning\n\nServices are sometimes partitioned to distribute data, load or functionality. Ocelli provides a partitioning mechanism whereby Servers can be members of 0 to many partitions. The client can then choose to route traffic only to one partition and fall back to other partitions. For example, partitioning can be used to implement a rack aware topology where all requests are first directed at the same rack as the client but can fail over to other racks.\n\n Round robin vs. Weighted Round Robin\n\n Pluggable weighting strategy\n\n Identity\n\nThe weight provided by the function is used as the weight. The highest value translates into a higher weight.\n\n reverseMax\n\nThe weight is calculated as the difference between the max and the value. The lowest value therefore translates into a higher \n\n Testing\n\n Topologies\n\nTopologies are similar to partitions but deal more with the changing position of the client host within a larger topology. Topologies also don't deal with data or functional aspects of a service. For example, to limit the number of hosts to which a client will connect the entire set of servers including the client are arranged into a ring and the client connects only to a subset of hosts within the ring using consistent hashing to ensure even distribution. As servers come in an out of existence Ocelli will adjust its target set of hosts to meet the new topology.\n\n Rate limiter\nTODO\n"
    Existing Dependencies:
    com.netflix.eureka:eureka2-client-shaded
- org.hamcrest:hamcrest-library
- org.uncommons:uncommons-maths
- org.mockito:mockito-core
- com.netflix.eureka:eureka-client
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 6 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
     //////////////////////////////////////////////
    /////////    PAGE AUDIOTRACK     ///////////
     ///////////////////////////////////////////

    
    function setPlaylist() {
        const playlist = [
          // {
          //   id: 1,
          //   title: "Track 1",
          //   artist: "Artist 1",
          //   url: "track1.mp3",
          //   cover_art_url: "cover_art_track1.jpg", 
          //   lyrics: "This is the first track's lyrics"
          // },
          // {
          //   id: 2,
          //   title: "Track 2",
          //   artist: "Artist 2",
          //   url: "track2.mp3",
          //   cover_art_url: "cover_art_track2.jpg", 
          //   lyrics: "This is the second track's lyrics"
          // },
          // {
          //   id: 3,
          //   title: "Track 3",
          //   artist: "Artist 3",
          //   url: "track3.mp3",
          //   cover_art_url: "cover_art_track3.jpg", 
          //   lyrics: "This is the third track's lyrics"
          // }
        ]
    
        // Loop over all playlist entries. Create a playlist item.
        playlist.forEach(entry => {
          createPlaylistEntry(entry.id, entry.title, entry.artist, entry.url, entry.cover_art_url);
        })
      }
    
      function createPlaylistEntry(id, title, artist, url, cover_art_url, lyrics = null) {
        // Create div element
        const divElement = document.createElement("div");
    
        // Set id of div element
        divElement.id = `playlistItem${id}`;
    
        // Set class of div element
        divElement.className = "playlistItem";
    
        // Create title element
        const titleElement = document.createElement("div");
    
        // Set class of title element
        titleElement.className = "title";
    
        // Set content of the title element to the value of title
        titleElement.textContent = title;
    
        // Append titleElement to divElement
        divElement.appendChild(titleElement);
    
        // Create artist element
        const artistElement = document.createElement("div");
    
        // Set class artist element
        artistElement.className = "artist";
    
        // Set content artist element to artis
        artistElement.textContent = artist;
    
        // Append artistElement to divElement
        divElement.appendChild(artistElement);
    
        // Create cover art element
        const coverArtElement = document.createElement("img");
    
        // Set class of cover art element
        coverArtElement.className = "coverArt";
    
        // Set source of cover art element
        coverArtElement.src = cover_art_url;
    
        // Append coverArtElement to divElement
        divElement.appendChild(coverArtElement);
    
        // Create lyrics element
        const lyricsElement = document.createElement("div");
    
        // Set class of lyrics element
        lyricsElement.classNama = "lyrics";

    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 6 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
        public void OnGetAsync()
        {
        }
    }
}
 using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace WebApp1.View
{
    public class IndexModel : PageModel
    {

Precision: 0
Recall: 0
F1 Score: 0
