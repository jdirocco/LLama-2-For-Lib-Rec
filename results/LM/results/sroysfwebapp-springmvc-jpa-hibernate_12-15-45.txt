<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: sroysf/webapp-springmvc-jpa-hibernate
    Project Description: Purpose \n\nProvide an integrated starter project for SpringMVC Spring ORM, backed by Hibernate and PostgreSQL. \n\nThis project demonstrates a variety of useful functions right out of the box, and can be used as a starting point for a real web application.\nIt makes extensive use of SpringMVC for the web tier. It also uses Spring to replace the direct access to the JPA entity manager API and \ninstead uses Spring dependency injection patterns to access data.\n\n Technologies \n\n Maven\n Hibernate\n JPA annotations\n PostgreSQL\n JSTL\n Servlets\n Log4J via SLF4J\n JUnit\n Hibernate maven plugin\n Spring MVC\n Spring ORM\n\n Features demonstrated \n\n JSTL page rendering\n Implementation of REST API, automatically returning JSON serialization.\n Parsing and controller routing in Spring MVC\n File upload\n Database access via injected DAO objects\n\n Setup and run \n\nAssuming you have setup your postgres database separately and have updated persistence.xml to point at it...\n\n1. mvn clean install DskipTests\n2. mvn hibernate3:hbm2ddl\n3. Use target/hibernate3/sql/schema.ddl to create your database schema\n4. mvn e exec:java Dexec.mainClass=com.force.samples.util.DataLoadUtil adds some data to the database\n5. mvn tomcat:run\n6. Point browser at \n'
    Existing Dependencies:
    javax.inject:javax.inject
- org.codehaus.jackson:jackson-mapper-lgpl
- commons-io:commons-io
- org.hibernate:hibernate-entitymanager
- org.codehaus.jackson:jackson-core-lgpl
- org.slf4j:slf4j-api
- org.springframework:spring-orm
- postgresql:postgresql
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 9 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
    
@extends('admin.layouts.app')
@section('title','Edit Post')
@section('content')
 		

<div class="row" >
			<form method="post" action="{{route('admin.posts.update',['post' => $post->id]) }}" enctype="multipart/form-data">
				{{ csrf_field() }}
				{{method_field('patch')}}
				
				<div class="row">
					<div class="col s8 offset-s3">
				        <div class="file-field input-field">
				          
						   {{ $post->title }}
						   <input type="text" name="name" id="name" value="{{ $post->title }}">
				        
				        <br> 
				        
				        
						  <div class="row">
							<div class="input-field col s6">
							<textarea name="description" id="textarea1" class="materialize-textarea" cols="30" rows="10">
								{{ $post->description }}
							</textarea>
							  <label for="textarea1">Description</label>
							<a href="{{route('admin.posts.create') }}" class="btn green">Add new Post</a>
							</div>
						</div>
								
				      <button type="submit" class="btn red" href="{{route('admin.posts.create') }}" id="submit">Add</button>
						
					</div>
			</form>
	</div>
		

		 

@endsection
    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 9 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s> #pragma once

#include "CoreMinimal.h"
#include "UObject/ObjectMacros.h"
#include "UObject/Object.h"
#include "UObject/Class.h"
#include "GameFramework/Actor.h"
#include "MassEntityAsset.generated.h"

USTRUCT(BlueprintType)
struct FMassEntityAsset
{
	GENERATED_BODY()

	TArray<UClass*> EntityClasses;

	FMassEntityAsset()
	{}

	static FORCEINLINE FString GetClassNam	return EntityClasses[RandomIndex];
	}
};
e() { return FString(TEXT("FMassEntityAsset")); }

	static FORCEINLINE bool HasClass()
	{
		return UMassEntityAsset::StaticClass()->HasAnyClassFlags(CLASS_HasCustomAnywhereData);
	}

	static FORCEINLINE UClass* GetClass() { return UMassEntityAsset::StaticClass(); }

	UClass* PickRandomClass()
	{
		int32 RandomIndex = FMath::RandRange(0, EntityClasses.Num() - 1);
	

Precision: 0
Recall: 0
F1 Score: 0
