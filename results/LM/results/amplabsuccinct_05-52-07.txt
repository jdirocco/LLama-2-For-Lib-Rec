<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: amplab/succinct
    Project Description: Succinct\n\n\n\n\n is a data store that enables queries\ndirectly on a compressed representation of data. This repository maintains the \nJava implementations of Succinct\'s core algorithms, and applications that \nexploit them, such as a binding for Succinct.\n\n Building Succinct\n\nSuccinct is built using .\nTo build Succinct and its component modules, run:\n\n mvn clean package\n\n SuccinctCore\n\nThe SuccinctCore module contains Java implementation of Succinct\'s core\nalgorithms. See a more descriptive description of the core module \n.\n\n Dependency Information\n\n Apache Maven\n\nTo build your application with SuccinctCore, you can link against this library\nusing Maven by adding the following dependency information to your pom.xml file:\n\n\n\n Succinct on Apache Spark\nWe provide Apache Spark and Apache Spark SQL interfaces for Succinct, which\nexpose a compressed, queryable RDD , enabling manipulation of \nunstructured data, and a for querying semistructured data\nkeyvalue pairs, text and json documents, etc.. We also expose Succinct\nas a DataSource in Apache Spark SQL as an experimental feature. More details on\nthe integration with Apache Spark can be found .\n\n Dependency Information\n\n Apache Maven\n\nTo build your application to run with Succinct on Apache Spark, you can link against this \nlibrary using Apache Maven by adding the following dependency information to your pom.xml file:\n\n\n\n SBT and SparkPackages\n\nAdd the dependency to your SBT project by adding the following to \nsee the \nfor sparksubmit and Maven instructions:\n\n\n\nThe succinctspark jar file can also be added to a Spark shell using the \n command line option. For example, to include it when starting the \nspark shell:\n\n\n'
    Existing Dependencies:
    org.apache.spark:spark-sql_2.11
- org.scala-lang:scala-library
- org.apache.spark:spark-core_2.11
- org.scalatest:scalatest_2.11
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 5 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
    
    <div class="container-fluid">
        <div class="row">
                <div class="col-md-12 text-center" style="padding:20px;">
                <h1>Penjualan</h1>
            </div>
            <div class="col-md-12 text-center">
            <form action="<?php echo base_url('penjualan/hasil')?>" method="get">
                <select name="id_customer" id="id_customer">
                <option value="">pilih customer</option>
                <?php foreach($customer as $cust):?>
                    <option value="<?php echo $cust->id_customer?>" <?php if($cust->id_customer === $this->input->get('id_customer')) echo "selected"?>> <?php echo $cust->nama_customer?></option>
                <?php endforeach;?>
                </select>
                <button type="submit" class="btn btn-primary">Cari</button>
            </form>  
                </div>
            </div>
            

            <div class="col-md-12">   
            <div class="table-responsive">     
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                    <th>No</th>
                    <th>Customer</th>
                    <th>Barang</th>
                    <th>Harga</th>
                    <th>Salesman</th>
                    <!-- <th>Aksi</th> -->
                    </tr>
                </thead>
                <?php
                $i=1;
                foreach($data_penjualan as $dtpenjual):?>
                <tr>
                    <td><?php echo $i++;?></td>
                    <td><?php echo $dtpenjual['nama_customer'];?></td>
                    <td><?php echo $dtpenjual['nama_barang'];?></td>
                    <td><?php echo $dtpenjual['harga'];?></td>
                    <td><?php echo $dtpenjual['nama_salesman'];?></td>
                   
                  
                </tr>
                <?php endforeach;?>
            </table>
            </div>
            </div>

        </div>
    </div> 
    
    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 5 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s> import React from "react";
i  <h1 className="App-title">Pokemon Finder</h1>
      </header>
    </div>
  </Router>
);

export default App;
mport { BrowserRouter as Router } from'react-router-dom';
import "./App.css";

const App = () => (
  <Router>
    <div className="App">
      <header className="App-header">
      

Precision: 0
Recall: 0
F1 Score: 0
