<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: lucmoreau/ProvToolbox
    Project Description: Github.io\n\nSee ProvToolbox project page PROVMODEL Java implementation: PROVMODEL Scala implementation:
    Existing Dependencies:
    org.antlr:stringtemplate
- commons-io:commons-io
- org.slf4j:slf4j-nop
- org.postgresql:postgresql
- org.hibernate:hibernate-entitymanager
- org.openprovenance.prov:prov-xml
- commons-lang:commons-lang
- commons-codec:commons-codec
- org.hibernate:hibernate-core
- com.fasterxml.jackson.dataformat:jackson-dataformat-xml
- org.openrdf.sesame:sesame-rio-n3
- org.openrdf.sesame:sesame-rio-trig
- com.google.guava:guava
- org.antlr:antlr-runtime
- org.openprovenance.prov:prov-model
- commons-cli:commons-cli
- org.openprovenance.prov:prov-json
- javax.xml.bind:jaxb-api
- org.codehaus.izpack:izpack-wrapper
- org.openprovenance.prov:prov-generator
- org.apache.commons:commons-lang3
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 21 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
    
<div id="carouselExampleCaptions" class="carousel slide" data-ride="carousel">
  <ol class="carousel-indicators">
    <li data-target="#carouselExampleCaptions" data-slide-to="0" class="active"></li>
    <li data-target="#carouselExampleCaptions" data-slide-to="1"></li>
    <li data-target="#carouselExampleCaptions" data-slide-to="2"></li>
  </ol>
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img src="https://www.bhphotovideo.com/images/images2015/homepage/25382-3200-1.jpg " class="d-block w-100" alt="...">
      <div class="carousel-caption d-none d-md-block">
        <h5>T-Shirt</h5>
        <p>T-shirt ini memiliki desain yang bagus dan memiliki bahan yang kokoh </p>
      </div>
    </div>
    <div class="carousel-item">
      <img src="https://www.bhphotovideo.com/images/images2015/homepage/25382-3200-1.jpg " class="d-block w-100" alt="...">
      <div class="carousel-caption d-none d-md-block">
        <h5>T-Shirt</h5>
        <p>T-shirt ini memiliki desain yang bagus dan memiliki bahan yang kokoh </p>
      </div>
    </div>
    <div class="carousel-item">
      <img src="https://www.bhphotovideo.com/images/images2015/homepage/25382-3200-1.jpg" class="d-block w-100" alt="...">
      <div class="carousel-caption d-none d-md-block">
        <h5>T-Shirt</h5>
        <p>T-shirt ini memiliki desain yang bagus dan memiliki bahan yang kokoh </p>
      </div>
    </div>
  </div>
  <a class="carousel-control-prev" href="#carouselExampleCaptions" role="button" data-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a class="carousel-control-next" href="#carouselExampleCaptions" role="button" data-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>
</div>
    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 21 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s> import { createContext, useContext, useReducer } from "react";

const defaultState = {
  token: null,
  isAuthenticating: false,
  isAuthenticated: false,
};

const Store = createContext(defaultState);
export const Provider = Store.Provider;
export const useStore = () => useContext, payload) => {
    switch (type) {
      case 'AUTHENTICATE':
        return {
          isAuthenticated: true,
          isAuthenticating: false,
          token: payload && payload.token,
         ...payload,
        }

    }

    return state;
  };

  const [state, dispatch] = useReducer(reducer, defaultState);

  return (
    <Provider value={{
     ...state,
      dispatch,
      setAuthenticated: (token, user) => dispatch({
        type: 'AUTHENTICATE',
        payload: {
          token: token,
          user: user
        }
      }),
      isAuthenticating: false,
    }}>
      { children }
    </Provider>
  )
};

export default ProviderWrapper;
(Store);


const ProviderWrapper = ({ children }) => {
  const reducer = (state, { type

Precision: 0
Recall: 0
F1 Score: 0
