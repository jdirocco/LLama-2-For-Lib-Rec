<s>[INST] <<SYS>> Given the recommendations for a Java project provided in the text below, please list these recommendations exclusively in the Maven format (groupId:artifactId:version). Ensure that the output consists solely of Maven dependencies, without additional explanations or content.
    Recommendations Text: <s>[INST] <<SYS>>
    As an AI specializing in software library recommendations for Java applications, provide recommendations exclusively in the Maven format: groupId:artifactId:version. Here is an example of how recommendations should be formatted:
    # Example 1
    Project: 'Project A'
    Description: 'A web application for managing tasks.'
    Existing Dependencies:
    - group:artifact:version
    Recommended Libraries:
    - group:artifact:version
    - group:artifact:version


    Your tasks are to:
    - Provide recommendations exclusively in the Maven format as shown in the example.
    - Ensure recommendations are suitable for the project context described. Focus solely on suggesting libraries that could enhance the project's capabilities or performance.
    - Consider the project's context and existing dependencies to suggest libraries that complement or enhance the current setup.
    - Ignore any code dont write any code.
    <</SYS>>
    Here are the top 20 libraries that are used in Java projects:
    junit:junit, org.slf4j:slf4j-api, log4j:log4j, com.google.guava:guava, commons-io:commons-io, org.slf4j:slf4j-log4j12, commons-lang:commons-lang, commons-codec:commons-codec, org.mockito:mockito-core, javax.servlet:servlet-api, joda-time:joda-time, org.apache.httpcomponents:httpclient, org.mockito:mockito-all, commons-logging:commons-logging, com.google.code.gson:gson, com.fasterxml.jackson.core:jackson-databind, ch.qos.logback:logback-classic, org.apache.commons:commons-lang3, org.springframework:spring-context, org.springframework:spring-test
    Project Name: htmlplus/htmlplus
    Project Description: 1 Clone the repository\n\n\n\n 2 Clone the submodules\n\n\n'
    Existing Dependencies:
    org.apache.commons:commons-jexl
- org.freemarker:freemarker
- org.mvel:mvel2
- org.apache.velocity:velocity
- org.springframework:spring-webmvc
- ognl:ognl
- org.antlr:antlr-runtime
- javassist:javassist
    Focus on suggesting libraries that enhance the project's capabilities, improve performance, or introduce new functionalities relevant to the project's needs. Provide a brief explanation for each recommended library, highlighting how it benefits the project. Reccomend me 9 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s>
    
    <div class="col-md-12" style="margin-top: 10px; margin-bottom: 10px;">

    <div class="card">


    <h5 class="card-header">
    
        @if($user->id == auth()->user()->id)
    <div class="btn-group">
    
    <button type="button" class="btn btn-primary dropdown-toggle " data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
    Actions

    </button>

    <div class="dropdown-menu">
    <a class="dropdown-item" href="{!! url('profile/'.$user->id)!!}"> View Profile </a>
    
    </div>

    
    </div>

    @else

        <img src="@if(auth()->check() and auth()->user()->hasRole('admin')) {!! Auth::user()->getProfilePicture()!!} @else {{ asset('avatar.png') }} @endif" class="profile-circle-image rounded-circle" width="30" height="30">
        
        <a href="{!! url($user->username)!!}">{!! $user->getName()!!} </a>

    @endif



</h5>
<div class="card-body">


<div class="row">
<div class="col-md-4 col-sm-4 col-xs-4">


</div>
<div class="col-md-8 col-sm-8 col-xs-8">

@foreach($user->roles()->get() as $role)
    <span class="badge badge-default badge-pill">{!! ucwords($role->name)!!}</span>
@endforeach


</div>


</div>


</div>




</div>
<hr>




    </div>
    
    <div class="col-md-12" style="margin-top: 10px; margin-bottom: 10px;">

    <div class="card">


    <h5 class="card-header">Posts</h5>




    <div class="card-body">
    {!!  PostService::generatePostsGrid($user->profile()->get()) !!}



</div>




</div>
<hr>




    </div>
    Please ignore any code snippets or examples and focus solely on extracting the Maven dependencies from the text.
    Please format the response as a list of Maven dependencies, each on a new line.
    <</SYS>>
    Recommendations must be in the Maven format and focus on enhancing the project's capabilities or addressing any identified needs. Provide recommendations exclusively in the Maven format. Reccomend me 9 libraries that can be added to the project to enhance its capabilities.
    [/INST]</s> // Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/aries-framework-go/cmd/aries-agent-mobile/pkg/wrappers/config (interfaces: Agent, Provider, VDR, HTTPClient, KeyStore, Crypto, DIDResolver, VDRegistry)

// Package config is a generated GoMock package.
package config

import (
	http "net/http"
	reflect "reflect"

	config "github.com/hyperledger/aries-framework-go-ext/component/vdr/orb/config"
	gomock "github.com/golang/mock/gomock"
	vdrapi "github.com/hyperledger/aries-framework-go-ext/component/vdr/vdrapi"
	vdr "github.com/hyperledger/aries-framework-go-ext/component/vdr/vdr"
	vdrpkg "github.com/hyperledger/aries-framework-go/pkg/doc/vdr"
	vdrpkgvdr "github.com/hyperledger/aries-framework-go/pkg/framework/context/vdr"
)

// MockAgent is a mock of Agent interface.
type MockAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMockRecorder
}

// MockAgentMockRecorder is the mock recorder for MockAgent.
type MockAgentMockRecorder struct {
	mock *MockAgent
}

// NewMockAgent creates a new mock instance.
func NewMockAgent(ctrl *gomock.Controller) *MockAgent {
	mock := &MockAgent{ctrl: ctrl}
	mock.recorder = &MockAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgent) EXPECT() *MockAgentMockRecorder {
	return m.recorder
}

// GetDefault vdrder for MockKeyStore.
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance.
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// Create kicks off an asynchronous key creation workflow.
func (m *MockKeyStore) Create(arg0 string, arg1...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Create", varargs...)
}

// Create mocks base method.
func (m *MockKeyStore) Create(k string, options...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{k}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Create", var

Precision: 0
Recall: 0
F1 Score: 0
